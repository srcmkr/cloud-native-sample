@page "/monitor"

@attribute [Authorize]

@using OrderMonitorClient.Services
@using OrderMonitorClient.Models

@inject OrderMonitorService _orderMonitorService
@inject ProductsService _productsService
@inject ISnackbar Snackbar

<PageTitle>Order Monitor</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Your Orders</MudText>

@if (_orders == null)
{
    <MudText Class="mt-4 mb-8">
        Your orders will appear here, once they have been processed.
    </MudText>
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="_orders" Hover="true" SortLabel="Sort By" Elevation="0" Style="@_backgroundColor">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<OrderMonitorListModel, object>(x => x.Id)">Order ID</MudTableSortLabel></MudTh>
            <MudTh>Positions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>

            <MudTd DataLabel="Position">
                @foreach (var pos in context.Positions)
                {
                    @(pos.Quantity + "x ")
                    <b>@pos.ProductName</b>
                    <br>
                    @pos.ProductDescription
                    <br><br>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
        </PagerContent>
    </MudTable>
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddCircle" Color="Color.Primary" @onclick="AddOrder">Place a new order</MudButton>
}

@code {
    private List<OrderMonitorListModel>? _orders;
    private string _backgroundColor = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        _orderMonitorService.OrderListChanged += HandleOrderUpdates;

        await _orderMonitorService.InitAsync();
        
        _orders = await ListOrders();
    }

    private async void HandleOrderUpdates(object sender, OrderEventArgs args)
    {
        Console.WriteLine("###SignalR - order update: {0}", args.Id);

        _orders = await ListOrders();

        _backgroundColor = "background-color: lightyellow";
        StateHasChanged();
        
        await Task.Delay(500);

        _backgroundColor = "background-color: none";
        StateHasChanged();
    }

    private async Task<List<OrderMonitorListModel>> ListOrders()
    {
        return await _orderMonitorService.ListOrdersAsync();
    }

    private async Task AddOrder()
    {
        var products = await _productsService.GetProductsAsync();
        if (products == null)
        {
            Snackbar.Add("Could not load products", Severity.Error);
            return;
        }
        var order = BuildRandomOrder(products);
        await _orderMonitorService.PlaceOrderAsync(order);
        Snackbar.Add($"Submitted an order with {order.Positions.Count} positions for you 💜", Severity.Success);
    }

    private OrderCreateModel BuildRandomOrder(List<ProductListModel> products)
    {
        var order = new OrderCreateModel();
        var rnd = new Random();
        var count = rnd.Next(1, 5);
        for (int i = 0; i < count; i++)
        {
            var product = products[rnd.Next(0, products.Count)];
            order.Positions.Add(new OrderPositionCreateModel
            {
                ProductId = product.Id.ToString(),
                Quantity = rnd.Next(1, 10)
            });
        }
        return order;
    }
}
